$date
	Mon May  5 23:07:20 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module InsFetch_n32_tb $end
$var wire 32 ! im_out_ins [31:0] $end
$var reg 1 " alu_zero $end
$var reg 1 # clk $end
$var reg 1 $ isJump $end
$var reg 16 % npc_in_imm16 [15:0] $end
$var reg 26 & npc_in_imm26 [25:0] $end
$var reg 1 ' npc_sel $end
$var reg 1 ( rst_im $end
$var reg 1 ) rst_pc $end
$scope module dut $end
$var wire 1 " alu_zero $end
$var wire 1 # clk $end
$var wire 1 $ isJump $end
$var wire 1 * npc_in_imm16 $end
$var wire 1 + npc_in_imm26 $end
$var wire 1 ' npc_sel $end
$var wire 1 ( rst_im $end
$var wire 1 ) rst_pc $end
$var wire 1 , pc_out $end
$var wire 1 - npc_out_addr $end
$var wire 32 . im_out_ins [31:0] $end
$var wire 1 / im_out_addr $end
$scope module im_unit $end
$var wire 1 # clk $end
$var wire 10 0 pc_out [9:0] $end
$var wire 1 ( rst_im $end
$var wire 11 1 byte_addr [10:0] $end
$var reg 10 2 im_out_addr [9:0] $end
$var reg 32 3 im_out_ins [31:0] $end
$upscope $end
$scope module npc_unit $end
$var wire 1 " alu_zero $end
$var wire 10 4 im_out_addr [9:0] $end
$var wire 1 $ isJump $end
$var wire 16 5 npc_in_imm16 [15:0] $end
$var wire 26 6 npc_in_imm26 [25:0] $end
$var wire 1 ' npc_sel $end
$var wire 32 7 pc_current [31:0] $end
$var wire 32 8 ext_imm26 [31:0] $end
$var wire 32 9 ext_imm16 [31:0] $end
$var reg 32 : npc_out_addr [31:0] $end
$upscope $end
$scope module pc_unit $end
$var wire 1 # clk $end
$var wire 32 ; npc_out_addr [31:0] $end
$var wire 1 ) rst_pc $end
$var wire 10 < word_addr [9:0] $end
$var wire 32 = byte_offset [31:0] $end
$var wire 10 > bounded_addr [9:0] $end
$var reg 10 ? pc_out [9:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 ?
bx >
bx =
bx <
b0x ;
bx :
b0 9
b0 8
b11000000000000 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
0/
b0 .
x-
0,
0+
0*
1)
1(
0'
b0 &
b0 %
0$
0#
0"
b0 !
$end
#5000
1#
#10000
0#
#15000
1#
#20000
0#
0)
0(
#25000
b0x00 1
b0x 0
x,
b110100000000110000000010010011 !
b110100000000110000000010010011 .
b110100000000110000000010010011 3
bx ?
1#
#30000
0#
#35000
bx0000000000000000000000000000 8
bx 7
b0x 4
x/
bx !
bx .
bx 3
b0x 2
1#
#40000
0#
#45000
1#
#50000
0#
#55000
1#
#60000
0#
#65000
1#
#70000
0#
#75000
1#
#76000
b100 %
1"
1'
#80000
0#
#85000
1#
#86000
0"
0'
#90000
0#
#95000
1#
#96000
1'
#100000
0#
#105000
1#
#106000
b0 <
b11111111111111111101000000000000 =
b0 ;
0-
bx0000000000000000000000000000 :
b10000 &
1$
#110000
0#
#115000
1#
#116000
0$
#120000
0#
#125000
1#
#126000
bx <
bx =
b0x ;
x-
bx :
b1111111111111110 %
1"
#130000
0#
#135000
1#
#140000
0#
#145000
1#
#146000
